class t extends GainNode{constructor(t,e){super(t)}set channelCount(t){}get channelCount(){}set channelCountMode(t){}get channelCountMode(){}set channelInterpretation(t){}get channelInterpretation(){}get numberOfInputs(){return super.numberOfInputs}get numberOfOutputs(){return this._output.numberOfOutputs}get gain(){}connect(){this._output.connect(...arguments)}disconnect(){this._output.disconnect(...arguments)}async createNodes(){this._input=this.context.createGain(),this._output=this.context.createGain()}connectNodes(){super.connect(this._input)}async setup(){await this.createNodes(),this.connectNodes()}}function e(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function n(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function i(t){for(var i=1;i<arguments.length;i++){var r=null!=arguments[i]?arguments[i]:{};i%2?n(Object(r),!0).forEach((function(n){e(t,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}class r extends EventTarget{constructor(t){var n;super(),n=this,e(this,"initialized",!1),e(this,"state",{enabled:!1}),e(this,"createAudioNode",(async function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};console.log("createAudioNode()");const{createNode:e}=await n.loadAudioNodeModule();return n.initialized||n.initialize(t.state),e(n,t)})),e(this,"createElement",(async function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};console.log("createElement()");const{createElement:e}=await n.loadGuiModule();return n.initialized||n.initialize(t.state),e(n,t)})),this.audioContext=t}initialize(){var t;let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const n=Object.entries(null!==(t=this.params)&&void 0!==t?t:{}).reduce((t,e)=>{let[n,{defaultValue:r}]=e;return i({},t,{[n]:r})},this.state);return this.state=i({},n,{},e),this.initialized=!0,console.log("initialize plugin with state",this.state),this}setState(t){this.state=i({},this.state,{},t),this.dispatchEvent(new CustomEvent("change",{detail:t}))}}e(r,"pluginName","WebAudioPlugin");export{t as CompositeAudioNode,r as WebAudioPlugin};
//# sourceMappingURL=index.js.map
