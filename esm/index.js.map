{"version":3,"file":"index.js","sources":["../src/CompositeAudioNode.js","../src/WebAudioPlugin.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable no-empty-function */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable no-underscore-dangle */\nexport default class CompositeAudioNode extends GainNode {\n\tconstructor(audioContext, options) {\n\t\tsuper(audioContext);\n\t\t// this.plugin = options.plugin;\n\t\t// this.options = options;\n\t}\n\n\tset channelCount(count) {\n\t}\n\n\tget channelCount() {\n\t\treturn undefined;\n\t}\n\n\tset channelCountMode(mode) {\n\t}\n\n\tget channelCountMode() {\n\t\treturn undefined;\n\t}\n\n\tset channelInterpretation(interpretation) {\n\t}\n\n\tget channelInterpretation() {\n\t\treturn undefined;\n\t}\n\n\tget numberOfInputs() {\n\t\treturn super.numberOfInputs;\n\t}\n\n\tget numberOfOutputs() {\n\t\treturn this._output.numberOfOutputs;\n\t}\n\n\tget gain() {\n\t\treturn undefined;\n\t}\n\n\tconnect(...args) {\n\t\tthis._output.connect(...args);\n\t}\n\n\tdisconnect(...args) {\n\t\tthis._output.disconnect(...args);\n\t}\n\n\t// Why we need MIDI in CompositeNode?\n\t/*\n\tconnectMidi(dest, outindex, inindex) {\n\t\tif (typeof outindex === 'undefined') outindex = 0;\n\t\tif (typeof inindex === 'undefined') inindex = 0;\n\t\tif (dest && this.outputsMidi[outindex] && dest.inputsMidi[inindex]) {\n\t\t\tthis.outputsMidi[outindex].connect(dest.inputsMidi[inindex]);\n\t\t}\n\t}\n\n\tdisconnectMidi(dest, outindex, inindex) {\n\t\tif (typeof outindex === 'undefined') outindex = 0;\n\t\tif (typeof inindex === 'undefined') inindex = 0;\n\t\tif (dest && this.outputsMidi[outindex] && dest.inputsMidi[inindex]) {\n\t\t\tthis.outputsMidi[outindex].disconnect(dest.inputsMidi[inindex]);\n\t\t}\n\t}\n\t*/\n\tasync createNodes() {\n\t\tthis._input = this.context.createGain();\n\t\tthis._output = this.context.createGain();\n\t}\n\n\tconnectNodes() {\n\t\tsuper.connect(this._input); // We have 3 GainNodes in the class, super, _input and _output\n\t}\n\n\tasync setup() {\n\t\tawait this.createNodes();\n\t\tthis.connectNodes();\n\t\t// this.updateState();\n\t\t// this.plugin.addEventListener('change', this.updateState);\n\t}\n}\n","\n//THIS IS WHERE THE PLUGIN API IS PROVIDED\n//\n// TODO : complete with the API we had in WAM/WAPs...\n// setPatch,getPatch, setParam/getParam, saveState/loadState etc.\nexport default class WebAudioPlugin extends EventTarget {\n\tstatic pluginName = 'WebAudioPlugin';\n\n\tinitialized = false;\n\n\tstate = {\n\t\tenabled: false,\n\t};\n\n\tconstructor(audioContext) {\n\t\tsuper();\n\t\tthis.audioContext = audioContext;\n\t}\n\n\tinitialize(state = {}) {\n\t\t// initialize state with params defaultValues\n\t\tconst defaultState = Object.entries(this.params ?? {})\n\t\t\t.reduce((acc, [name, { defaultValue }]) => ({\n\t\t\t\t...acc,\n\t\t\t\t[name]: defaultValue,\n\t\t\t}), this.state);\n\n\t\t// merge default state with initial state passed to constructor\n\t\tthis.state = { ...defaultState, ...state };\n\t\tthis.initialized = true;\n\n\t\tconsole.log('initialize plugin with state', this.state);\n\n\t\treturn this;\n\t}\n\n\tsetState(state) {\n\t\tthis.state = { ...this.state, ...state };\n\t\tthis.dispatchEvent(new CustomEvent('change', { detail: state }));\n\t}\n\n\tcreateAudioNode = async (options = {}) => {\n\t\tconsole.log('createAudioNode()');\n\t\tconst { createNode } = await this.loadAudioNodeModule();\n\t\tif (!this.initialized) this.initialize(options.state);\n\t\treturn createNode(this, options);\n\t};\n\n\tcreateElement = async (options = {}) => {\n\t\tconsole.log('createElement()');\n\t\tconst { createElement } = await this.loadGuiModule();\n\t\tif (!this.initialized) this.initialize(options.state);\n\t\treturn createElement(this, options);\n\t};\n}\n"],"names":["CompositeAudioNode","GainNode","constructor","audioContext","options","count","mode","interpretation","super","numberOfInputs","this","_output","numberOfOutputs","connect","disconnect","_input","context","createGain","connectNodes","createNodes","WebAudioPlugin","EventTarget","enabled","async","console","log","createNode","_this","loadAudioNodeModule","initialized","initialize","state","createElement","loadGuiModule","defaultState","Object","entries","params","reduce","acc","name","defaultValue","setState","dispatchEvent","CustomEvent","detail"],"mappings":"AAIe,MAAMA,UAA2BC,SAC/CC,YAAYC,EAAcC,SACnBD,oBAKUE,6CAOIC,sDAOKC,6DAQlBC,MAAMC,4CAINC,KAAKC,QAAQC,4BAOrBC,eACMF,QAAQE,sBAGdC,kBACMH,QAAQG,kDAsBRC,OAASL,KAAKM,QAAQC,kBACtBN,QAAUD,KAAKM,QAAQC,aAG7BC,qBACOL,QAAQH,KAAKK,4BAIbL,KAAKS,mBACND,usBC5EQ,MAAME,UAAuBC,YAS3CnB,YAAYC,8CANE,kBAEN,CACPmB,SAAS,8BA8BQC,qBAAOnB,yDAAU,GAClCoB,QAAQC,IAAI,2BACNC,WAAEA,SAAqBC,EAAKC,6BAC7BD,EAAKE,aAAaF,EAAKG,WAAW1B,EAAQ2B,OACxCL,EAAWC,EAAMvB,8BAGTmB,qBAAOnB,yDAAU,GAChCoB,QAAQC,IAAI,yBACNO,cAAEA,SAAwBL,EAAKM,uBAChCN,EAAKE,aAAaF,EAAKG,WAAW1B,EAAQ2B,OACxCC,EAAcL,EAAMvB,WApCtBD,aAAeA,EAGrB2B,uBAAWC,yDAAQ,SAEZG,EAAeC,OAAOC,kBAAQ1B,KAAK2B,sBAAU,IACjDC,OAAO,CAACC,WAAMC,GAAMC,aAAEA,kBACnBF,IACFC,GAAOC,KACL/B,KAAKqB,mBAGLA,WAAaG,KAAiBH,QAC9BF,aAAc,EAEnBL,QAAQC,IAAI,+BAAgCf,KAAKqB,OAE1CrB,KAGRgC,SAASX,QACHA,WAAarB,KAAKqB,SAAUA,QAC5BY,cAAc,IAAIC,YAAY,SAAU,CAAEC,OAAQd,QAjCpCX,eACA"}